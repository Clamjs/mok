#!/usr/bin/env node
var util = require('mace');
var fs = require('fs');
var mok = require('../');
var loader = require('../lib/loader.js');

var CHARSET = 'UTF-8';
process.stdout.setEncoding(CHARSET);
process.stdin.setEncoding(CHARSET);
process.stderr.setEncoding(CHARSET);

var info = require('../package.json');

var project = util.Command(info.name, info.description, info.version)
.option('-v, --version', 'The ' + info.name + ' version', info.version)
.option('-s, --source', 'Source dir or file', './api/')
.option('-d, --dest', 'Dest dir or file', './mock/')
  .command('doc', 'output doc file', info.version)
    .action(function (source, dest) {
      if (!dest) {
        return util.error('dest can\'t be empty');
      }
      mok.html(source, dest);
    })
  .command('mock', "out put mock json", info.version)
    .action(function (source, dest) {
      if (!dest) {
        dest = source;
      }
      var path = require('path');
      dest = path.resolve(dest);
      source = path.resolve(source);
      var stat = fs.statSync(source);
      function _mockFile (file) {
        if (!file.match(/\.json$/) || file.match(/\-mock\.json$/)) { return }  
        var ret = mok.mock(loader.load(path.join(source, file)).json);
        if (!fs.statSync(dest).isDirectory()) {
          dest = path.dirname(dest);
        }
        fs.writeFileSync(path.join(dest, file.replace('.json','-mock.json')), JSON.stringify(ret,'',2));
      }
      if (stat.isDirectory()) {
        fs.readdir(source, function (e, files) {
          files.forEach(_mockFile);
        });
      } else if (stat.isFile()){
        _mockFile(source);
      } else {
        util.error('Error: unknown source type!');
      }
    })
.action(function (version) {
  if (version) {
    return util.logue('version: %s', info.version);
  }
  project.help();
});
project.parse(process.argv);