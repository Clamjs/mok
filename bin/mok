#!/usr/bin/env node
var util = require('mace');
var fs = require('fs');
var mok = require('../');
var CHARSET = 'UTF-8';
process.stdout.setEncoding(CHARSET);
process.stdin.setEncoding(CHARSET);
process.stderr.setEncoding(CHARSET);

var info = require('../package.json');

var project = util.Command(info.name, info.description, info.version)
.option('-v, --version', 'The ' + info.name + ' version', info.version)
.option('-s, --source', 'Source dir or file', './api/')
.option('-d, --dest', 'Dest dir or file', './mock/')
  .command('doc', 'output doc file', info.version)
    .action(function (source, dest) {
      var path = require('path');
      source = path.resolve(source);
      dest = path.resolve(dest);
      var stat = fs.statSync(source);
      if (stat.isDirectory()) {
        fs.readDir(source, function (file) {
          var filepath = path.join(source, file);
          if (fs.statSync(filepath).isFile()) {
            try {
              var basename = path.basename(filepath);
              mok.doc(filepath, dest + basename + '.md');
            } catch(e) {
              util.error('Error to corver this file : %s.', filepath);
            }
          }
        });
      } else if (stat.isFile()){
        try {
          var basename = path.basename(filepath);
          mok.doc(source, dest + basename + '.md');
        } catch(e) {
          util.error('Error to corver this file : %s.', filepath);
        }
      } else {
        util.error('Error: unknown source type!');
      }
    })
  .command('mok', "out put mock json", info.version)
    .action(function (source, dest) {
      var path = require('path');
      dest = path.resolve(dest);
      source = path.resolve(source);
      var stat = fs.statSync(source);
      if (stat.isDirectory()) {
        fs.readDir(source, function (file) {
          var filepath = path.join(source, file);
          if (fs.statSync(filepath).isFile()) {
            try {
              var data = mok.mok(filepath);
              var basename = path.basename(filepath);
              fs.writeFileSync(dest + basename + '.json',JSON.stringify(data,'',2));
            } catch(e) {
              util.error('Error to corver this file : %s.', filepath);
            }
          }
        });
      } else if (stat.isFile()){
        try {
          var data = mok.mok(source);
          var basename = path.basename(source);
          fs.writeFileSync(dest + basename + '.json',JSON.stringify(data,'',2));
        } catch(e) {
          util.error('Error to corver this file : %s.', filepath);
        }
      } else {
        util.error('Error: unknown source type!');
      }
    })
.action(function (version) {
  if (version) {
    return util.logue('version: %s', info.version);
  }
  project.help();
});
project.parse(process.argv);